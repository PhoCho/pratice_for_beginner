Please read through the following instructions and create an answer file and commit the 
answer file at the end of each day.

1. The familiar commands.

    	cd clear exit sudo chmod ls mv rm cp cal date 
	gedit nano host localhost mkdir ifconfig iwconfig 
	start stop install purge/remove history echo

	a. Create a training directory. Always operate under home directory.
	   mkdir training
	   All future training materials should be under this directory.

	b. What is the shorthand for home directory ?  ~
	   You can use ~ to reference home directory.

	   ---> what is your observation ? 
	   
	c. pwd shows current working directory.

	d. try the following ls options.
	   ls -l, ls -la, ls -lt, ls -lrt, ls -lrat

	   ---> what is your observation ? 

	e. know which rc file is set for curent system.
 	   Edit both  .profile and .bashrc and put an echo line to identify
	   each file. e.g. echo "profile"   in .profile and
	   echo "bashrc" in .bashrc.
  
	   open a new terminal and see those echo statements executed.
	   
	   ---> what is your observation ? 


2. Getting familiar with the file system and efficient navigation.

   	a. install tree command. sudo apt-get install tree
	b. use tree command to look at the file system.
	c. try -->   tree -L 2 /
	d. man tree     and find out how tree can be used.


	e. download tree source code from the following website.
	   http://mama.indstate.edu/users/ice/tree/

	f. untar the file using the following command.
	   tar xzvf <filename>
	g. Look at the README and follow the instruction to compile and
	   install tree in ~/training/bin .
	   You might have to create  bin directory.

	h. change the $PATH so that ~/training/bin is at the front of the $PATH.

	   -----> copy and inlcude the updated $PATH in the answer file.



3. Change the prompt

	For this exercise, you will capture all the results at the end of the training_progress file. This has to be done for all section below.

	1. http://www.linuxnix.com/2013/04/linuxunix-shell-ps1-prompt-explained-in-detail.html
	   Read the tutorial and try out the examples.


	2. http://www.thegeekstuff.com/2008/09/bash-shell-ps1-10-examples-to-make-your-linux-prompt-like-angelina-jolie/
	   Read this tutorial and try out 1-6. You don't need to try the rest but if you want to, it's ok. 

	3. Come up with 5 examples of your own customized prompt.

	4. What are PS1, PS2, PS3, and PS4 ? 
	    

4. Linux fundamentals

	1. ls command details
	http://www.ubuntujourneyman.com/2011/05/23/decoding-the-ls-l-output/

	---> Write a summary of what you have learned. 
	     Also include any new keyword or concept you encounter that 
	     you are not familir with.


	2. linux permissions
	http://www.linux.com/learn/tutorials/309527-understanding-linux-file-permissions

	---> same writeup as 1.

	3. ps and pstree
	   Use ps and manual to explore the processes running in the system and their
	   characteristics.

	   processes can have children. pstree will show all the processes running in the
	   system and their hierarchy. Note that there is a single root.

	  -----> What is the root of all processes in Linux.

	4. Concepts and conventions to understand

	   At the end of the following exercises, make sure that you understand all
	   these concepts. If there are any concept or keywor that you don't understand,
           include it in training_progress as questions.

	   a. Current working directory.  pwd  shows current working directory.
	  
	   b. What are absolute and relative path?
              try out:  cd, cd -, cd ~peneil

	      peneil can be replaced with any valid username.

	   c. Finding out a file's type.
	      try out:   file  <filename>


	      --->  incldue 5 different file types using file command.

	    d. head, tail

		try out: head  <filename>, tail <filename>
			 read man head and man tail 

		----> using head and tail, how can you specify the number of lines and 
		      bytes that you want to see.

	    e. file and directory manipulation

		read man for each command if you are not clear.

	        mkdir  	-- create directory
				---> how do you create directory 3 layers deep in one command.
		cp 	-- copy files and directories
				---> how do you do recursive copy

		mv      -- move files and directories
		rm 	-- remove files and directories
			   --> how do you remove a folder
			   --> how do you remove a folder recursively
		rmdir   -- remove a folder

		
	     f. creating soft link	
             	
		ln -s  <source file/directory> <link name>

		soft link create a shortcut for accessing file.

		---> create a soft link to a file and a directory.
	
		extra credit: find out what a hard link is and write about it.


	     g. which 

		find out the location of default program.
		try out: which sh, which bash, which vim, which ls


	     h. whatis 
		
		display a brief description of a program.


		try out: whatis ls, whatis vim, whatis sudo, whatis ifconfig
		

5. Redirection

		A program have 3 input/output  or I/O. They are standard input, output, error.	

		Those I/O can be manipulated.

		Standard output or (1).
		try out:   
			a. ls > output.txt
			   The output of ls is saved in output.txt

			b. ps aux  >> output.txt
			   The output of 'ps aux' is appended to output.txt
	
			   >> or double greater than symbol is appending.


			In both cases, if the destination file is not there, it is created.
			If the destination file is there, the file is overwritten in > case
			and appended in >> case.

		Standard error or (2).

		try out: 
			a. ls -l /bin/usr > error_output
			   check the content of error_output.


			b. ls -l /bin/usr 2> error_output
			   check the content of error_output.
			   the error message should be redirected to the file.


			c. If you want both stdout and stderr to a file, you can combine them.

			   Write a small shell script.

			   name: stdtest.sh
			   the following three lines are the content.


			   #!/bin/sh

			   echo "test"

			   ls -l /bin/usr



			    change the permission of the files so that it is executable.

			    chmod +x stdtest.sh


			    ./stdtest.sh &> stdoutput


			    check to see the output has both "test" and error output.


6. Pipelines

		The output of a program could be pipelined into another program.

		try out:  ls /bin /usr/bin | sort | less
			  ls /bin /usr/bin | sort | uniq | less 
			  ls /bin /usr/bin | sort | uniq -d | less 


			  wc texts/gettysburg_address.txt 


			  ls /bin /usr/bin | sort | uniq | wc -l


			  ls /bin/ /usr/bin | sort | uniq | grep zip

			  --> grep is used for finding out text pattern in a file or stdin.
				grep <options> <pattern> file

				grep -i   (ignore case)
				grep -n   (show line number)
				grep -B 3 -A 3 (show before 3 lines and after 3 lines)


			   ls /usr/bin | tail -n 7

			   ls /usr/bin | tee ls.txt | grep linux



		Using these commands, test it out on heart_of_darkness.txt.

		--> give 10 different pipelining usages.

7. When you want to move around quickly in command line, you can use the shortcut to
   navigate the commandline.


	ctrl+a  	move cursor to the beginning
	ctrl+e 		move cursor to the end
	ctrl+f 		move cursor one character at a time forward
	ctrl+b 		move cursor one character at a time backward

	alt+f 		move cursor one word at a time forward
	alt+b 		move cursor one word at a time backward

	ctrl+k 		kill from cursor to the end of line
	ctrl+y 		paste any content from the buffer.

	
